AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template KVS License Detection Demo'

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id'
    Description: 'Ubuntu 22.04 LTS AMI from SSM Parameter Store'
  EmailAddress:
    Type: String
    Description: Email address to receive notification when user-data script completes
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$

Resources:
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: EC2UserDataCompletionTopic

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref NotificationTopic
      Endpoint: !Ref EmailAddress

  EC2KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: aws-kvs-license-detection-key

  KVSStream:
    Type: AWS::KinesisVideo::Stream
    Properties:
      Name: aws-kvs-license-detection-demo
      DataRetentionInHours: 24
      Tags:
        - Key: Name
          Value: aws-kvs-license-detection-demo

  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn: LambdaInvokePermission
    Properties:
      BucketName: !Sub aws-kvs-license-detection-s3-${AWS::AccountId}-${AWS::Region}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt LicensePlateDetectionFunction.Arn

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.medium
      KeyName: !Ref EC2KeyPair
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
        - Key: Name
          Value: aws-kvs-demo
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e  # Exit on error

          # Update package lists and install dependencies in a single command
          DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
            cmake \
            build-essential \
            pkg-config \
            libssl-dev \
            libcurl4-openssl-dev \
            liblog4cplus-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-base-apps \
            gstreamer1.0-plugins-bad \
            gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-ugly \
            gstreamer1.0-tools \
            git \
            unzip \
            jq

          # Create working directory and set ownership
          KVS_DIR="/home/ubuntu/amazon-kinesis-video-streams-producer-sdk-cpp"
          mkdir -p $KVS_DIR
          cd /home/ubuntu

          # Clone and build KVS SDK
          git clone https://github.com/awslabs/amazon-kinesis-video-streams-producer-sdk-cpp.git
          cd $KVS_DIR
          mkdir -p build && cd build
          cmake .. -DBUILD_GSTREAMER_PLUGIN=ON -DBUILD_DEPENDENCIES=OFF -DALIGNED_MEMORY_MODEL=ON
          make -j$(nproc)

          # Set up environment
          echo "export GST_PLUGIN_PATH=$KVS_DIR/build" >> /home/ubuntu/.bashrc
          export GST_PLUGIN_PATH=$KVS_DIR/build

          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          ./aws/install
          rm -rf aws awscliv2.zip

          # Create update-image-generation-input.json
          cat > /home/ubuntu/update-image-generation-input.json << EOF
          {
            "StreamName": "aws-kvs-license-detection-demo",
            "ImageGenerationConfiguration": {
              "Status": "ENABLED",
              "DestinationConfig": {
                "DestinationRegion": "${AWS::Region}",
                "Uri": "s3://aws-kvs-license-detection-s3-${AWS::AccountId}-${AWS::Region}"
              },
              "SamplingInterval": 5000,
              "ImageSelectorType": "SERVER_TIMESTAMP",
              "Format": "JPEG",
              "FormatConfig": {
                "JPEGQuality": "80"
              },
              "WidthPixels": 1280,
              "HeightPixels": 720
            }
          }
          EOF

          # Update KVS image generation configuration
          aws kinesisvideo update-image-generation-configuration \
            --cli-input-json file:///home/ubuntu/update-image-generation-input.json

          # Set up video streaming
          VIDEO_DIR="/home/ubuntu/videos"
          mkdir -p $VIDEO_DIR
          cd $VIDEO_DIR
          wget -q https://github.com/jpsotoal/aws-kvs-license-detection/raw/main/license-detection.mp4

          # Create streaming script
                    # Create streaming script with IMDSv2 support
          cat > /home/ubuntu/stream-video.sh << 'EOF'
          #!/bin/bash
          set -e
          export GST_PLUGIN_PATH=/home/ubuntu/amazon-kinesis-video-streams-producer-sdk-cpp/build

          # Get IMDSv2 token
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          if [ -z "$TOKEN" ]; then
            echo "Failed to retrieve IMDSv2 token"
            exit 1
          fi

          # Get credentials with IMDSv2 token
          ROLE_NAME=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/iam/security-credentials/)
          if [ -z "$ROLE_NAME" ]; then
            echo "Failed to retrieve IAM role name"
            exit 1
          fi

          CREDENTIALS=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/iam/security-credentials/$ROLE_NAME)
          export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r '.AccessKeyId')
          export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r '.SecretAccessKey')
          export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r '.Token')
          
          # Get region using IMDSv2
          export AWS_DEFAULT_REGION=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/region)

          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ] || [ -z "$AWS_DEFAULT_REGION" ]; then
            echo "Failed to retrieve credentials or region"
            exit 1
          fi

          echo "Successfully retrieved credentials for role: $ROLE_NAME"
          echo "Region: $AWS_DEFAULT_REGION"
          
          cd ~/amazon-kinesis-video-streams-producer-sdk-cpp/build
          # ./kvs_gstreamer_sample aws-kvs-license-detection-demo ~/videos/license-detection.mp4
          while true; do ./kvs_gstreamer_sample aws-kvs-license-detection-demo ~/videos/license-detection.mp4 && sleep 10s; done
          EOF

          # Set correct ownership and permissions
          chown ubuntu:ubuntu /home/ubuntu/stream-video.sh
          chmod +x /home/ubuntu/stream-video.sh

          # Set correct ownership for all files in ubuntu's home directory
          chown -R ubuntu:ubuntu /home/ubuntu/
          
          # Make videos directory and set permissions
          mkdir -p /home/ubuntu/videos
          chown -R ubuntu:ubuntu /home/ubuntu/videos
          chmod 755 /home/ubuntu/videos

          # Create systemd service to run stream-video.sh automatically
          cat > /etc/systemd/system/kvs-stream.service << EOF
          [Unit]
          Description=KVS Video Streaming Service
          After=network.target

          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/home/ubuntu
          ExecStart=/home/ubuntu/stream-video.sh
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
          EOF

          # Enable and start the service
          systemctl daemon-reload
          systemctl enable kvs-stream.service
          systemctl start kvs-stream.service

          # Get IMDSv2 token first
          TOKEN=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          if [ -z "$TOKEN" ]; then
            echo "Failed to retrieve IMDSv2 token"
            exit 1
          fi

          # Get instance ID using IMDSv2
          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
          if [ -z "$INSTANCE_ID" ]; then
            echo "Failed to retrieve instance ID"
            exit 1
          fi

          CONNECT_URL="https://${AWS::AccountId}.console.aws.amazon.com/ec2/home?region=${AWS::Region}#ConnectToInstance:instanceId=$INSTANCE_ID"

          # Create a more detailed message
          MESSAGE=$(cat <<EOF
          EC2 instance $INSTANCE_ID has completed user-data script initialization.

          Instance Details:
          - Instance ID: $INSTANCE_ID
          - Region: ${AWS::Region}
          - Account ID: ${AWS::AccountId}

          Connect to your instance using:
          $CONNECT_URL

          Note: Make sure you're logged into the AWS Console before using this URL.

          The video streaming service has been automatically started and will run continuously.
          
          You can manage the streaming service using these commands:
          - Check status: sudo systemctl status kvs-stream.service
          - Stop streaming: sudo systemctl stop kvs-stream.service
          - Start streaming: sudo systemctl start kvs-stream.service
          - Restart streaming: sudo systemctl restart kvs-stream.service
          - Disable auto-start: sudo systemctl disable kvs-stream.service
          - Enable auto-start: sudo systemctl enable kvs-stream.service

          EOF
          )

          # Send completion notification with the connect URL
          aws sns publish \
            --topic-arn ${NotificationTopic} \
            --message "$MESSAGE" \
            --subject "EC2 UserData Script Complete - Instance $INSTANCE_ID" \
            --region ${AWS::Region}

          # Log completion
          echo "UserData script completed successfully and notification sent with connect URL"

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref NotificationTopic

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LicensePlateDetectionFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LicensePlateDetectionFunction
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      MemorySize: 256
      Code:
        ZipFile: |
          import json
          import urllib.parse
          import boto3
          import logging
          import re
          import datetime
          import os
          from decimal import Decimal
          from botocore.exceptions import ClientError

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          # Add a handler to ensure logs are formatted properly
          if not logger.handlers:
              handler = logging.StreamHandler()
              handler.setFormatter(logging.Formatter('%(asctime)s [%(levelname)s] %(message)s'))
              logger.addHandler(handler)

          logger.info('Lambda function initializing')

          s3 = boto3.client('s3')
          rekognition_client = boto3.client('rekognition')
          dynamodb = boto3.resource('dynamodb')

          # Configure this to match your DynamoDB table name
          LICENSE_PLATE_TABLE = os.environ.get('LICENSE_PLATE_TABLE', 'LicensePlateDetections')
          # Time window in minutes to consider a license plate as duplicate
          DUPLICATE_WINDOW_MINUTES = int(os.environ.get('DUPLICATE_WINDOW_MINUTES', '5'))



          class RekognitionImage:
              def __init__(self, image, image_name, rekognition_client):
                  self.image = image
                  self.image_name = image_name
                  self.rekognition_client = rekognition_client

              @classmethod
              def from_bucket(cls, s3_object, rekognition_client):
                  image = {"S3Object": {"Bucket": s3_object.bucket_name, "Name": s3_object.key}}
                  return cls(image, s3_object.key, rekognition_client)

              def detect_text(self):
                  """Detects text in the image"""
                  try:
                      response = self.rekognition_client.detect_text(Image=self.image)
                      text_detections = response['TextDetections']
                      logger.info(f'Found {len(text_detections)} text detections in the image')
                      return text_detections
                  except ClientError as e:
                      logger.error(f"Couldn't detect text in {self.image_name}. {e}")
                      raise

          def process_license_plate(text_detections):
              """
              Process text detections to find and clean license plate text
              Returns a tuple of (license_plate, confidence)
              """
              # First, look for text detections with high confidence
              potential_plates = []
              
              for detection in text_detections:
                  if detection['Type'] == 'LINE':  # Focus on LINE detections which are complete text lines
                      text = detection['DetectedText']
                      confidence = detection['Confidence']
                      
                      # Apply license plate pattern matching - adjust regex for your specific format
                      # This example looks for patterns like: ABC123, ABC-123, ABC 123, etc.
                      cleaned_text = re.sub(r'\s+', '', text)  # Remove spaces
                      
                      # Check if the text matches common license plate patterns
                      # Adjust these patterns based on your specific license plate formats
                      if re.match(r'^[A-Z0-9]{5,8}$', cleaned_text) or re.match(r'^[A-Z]{1,3}[-\s]?[0-9]{1,4}$', text):
                          potential_plates.append((text, cleaned_text, confidence))
              
              # Sort by confidence and return the highest confidence match
              if potential_plates:
                  potential_plates.sort(key=lambda x: x[2], reverse=True)
                  original_text, cleaned_text, confidence = potential_plates[0]
                  logger.info(f"Detected license plate: {original_text} (cleaned: {cleaned_text}) with confidence {confidence:.2f}")
                  return cleaned_text, confidence
              
              return None, 0

          def check_duplicate_license_plate(license_plate, time_window_minutes=None):
              """Check if this license plate was recently detected within the time window"""
              try:
                  table = dynamodb.Table(LICENSE_PLATE_TABLE)
                  
                  # Calculate the timestamp threshold (current time minus window)
                  if time_window_minutes is None:
                      time_window_minutes = DUPLICATE_WINDOW_MINUTES
                  current_time = datetime.datetime.now()
                  time_threshold = (current_time - datetime.timedelta(minutes=time_window_minutes)).isoformat()
                  
                  # Query for recent entries with this license plate
                  response = table.scan(
                      FilterExpression="LicensePlate = :lp AND #ts > :time",
                      ExpressionAttributeNames={
                          "#ts": "Timestamp"
                      },
                      ExpressionAttributeValues={
                          ":lp": license_plate,
                          ":time": time_threshold
                      }
                  )
                  
                  items = response.get('Items', [])
                  if items:
                      logger.info(f"Found duplicate license plate {license_plate} within the last {time_window_minutes} minutes")
                      return True
                  
                  return False
              except ClientError as e:
                  logger.error(f"Error checking for duplicate license plate: {e}")
                  # If there's an error checking, we'll proceed with saving
                  return False

          def save_to_dynamodb(license_plate, confidence, image_key, bucket_name):
              """Save the license plate detection to DynamoDB"""
              try:
                  # Check for duplicates first
                  is_duplicate = check_duplicate_license_plate(license_plate)
                  if is_duplicate:
                      logger.info(f"Skipping duplicate license plate: {license_plate}")
                      return False
                      
                  table = dynamodb.Table(LICENSE_PLATE_TABLE)
                  timestamp = datetime.datetime.now().isoformat()
                  
                  item = {
                      'image_name': image_key,  # Primary key required by the table
                      'LicensePlate': license_plate,
                      'Timestamp': timestamp,
                      'Confidence': Decimal(str(confidence)),  # Convert float to Decimal
                      'ImageKey': image_key,
                      'BucketName': bucket_name
                  }
                  
                  table.put_item(Item=item)
                  logger.info(f"Saved license plate {license_plate} to DynamoDB")
                  return True
              except ClientError as e:
                  logger.error(f"Error saving to DynamoDB: {e}")
                  return False

          def lambda_handler(event, context):
              # Get the object from the event
              bucket_name = event['Records'][0]['s3']['bucket']['name']
              image_key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
              
              # Enhanced logging with request ID for traceability
              request_id = context.aws_request_id
              logger.info(f"[RequestID: {request_id}] Processing image {image_key} from bucket {bucket_name}")
              
              try:
                  # Create S3 object and Rekognition image
                  s3_object = boto3.resource("s3").Object(bucket_name, image_key)
                  rekognition_image = RekognitionImage.from_bucket(s3_object, rekognition_client)
                  
                  # Detect text in the image
                  logger.info(f"[RequestID: {request_id}] Calling Rekognition to detect text")
                  text_detections = rekognition_image.detect_text()
                  
                  # Process the text to find license plates
                  license_plate, confidence = process_license_plate(text_detections)
                  
                  if license_plate:
                      logger.info(f"[RequestID: {request_id}] License plate detected: {license_plate} with confidence {confidence:.2f}")
                      
                      # Save the detection to DynamoDB (if not a duplicate)
                      saved = save_to_dynamodb(license_plate, confidence, image_key, bucket_name)
                      
                      result = {
                          'license_plate': license_plate,
                          'confidence': float(confidence),
                          'image_key': image_key,
                          'saved_to_db': saved
                      }
                      
                      if not saved:
                          result['duplicate'] = True
                          logger.info(f"[RequestID: {request_id}] Duplicate license plate - not saved to DynamoDB")
                      
                      return {
                          'statusCode': 200,
                          'body': json.dumps(result, default=str)
                      }
                  else:
                      logger.info(f"[RequestID: {request_id}] No license plate detected in the image")
                      return {
                          'statusCode': 200,
                          'body': json.dumps({
                              'message': 'No license plate detected',
                              'image_key': image_key
                          }, default=str)
                      }
                      
              except Exception as e:
                  logger.error(f"Error processing image: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'message': f'Error processing image: {str(e)}',
                          'image_key': image_key
                      }, default=str)
                  }

  LicensePlateDetectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LicensePlateDetections
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: image_name
          AttributeType: S
      KeySchema:
        - AttributeName: image_name
          KeyType: HASH

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LicensePlateDetectionFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:s3:::aws-kvs-license-detection-s3-${AWS::AccountId}-${AWS::Region}

Outputs:
  InstanceId:
    Description: Instance ID of the created EC2 instance
    Value: !Ref EC2Instance
  PublicDNS:
    Description: Public DNS name of the created EC2 instance
    Value: !GetAtt EC2Instance.PublicDnsName
  PublicIP:
    Description: Public IP address of the created EC2 instance
    Value: !GetAtt EC2Instance.PublicIp
  KeyPairName:
    Description: Name of the created key pair
    Value: !Ref EC2KeyPair
  KVSStreamName:
    Description: Name of the created KVS stream
    Value: !Ref KVSStream
  S3BucketName:
    Description: Name of the created S3 bucket
    Value: !Ref S3Bucket
  LambdaFunctionName:
    Description: Name of the Lambda function for license plate detection
    Value: !Ref LicensePlateDetectionFunction
  DynamoDBTableName:
    Description: Name of the DynamoDB table for license plate detections
    Value: !Ref LicensePlateDetectionsTable
  SNSTopicARN:
    Description: ARN of the SNS Topic for notifications
    Value: !Ref NotificationTopic
